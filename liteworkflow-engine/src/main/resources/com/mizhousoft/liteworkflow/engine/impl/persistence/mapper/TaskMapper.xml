<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mizhousoft.liteworkflow.engine.impl.persistence.mapper.TaskMapper">
	
	<resultMap type="com.mizhousoft.liteworkflow.engine.impl.persistence.entity.TaskEntity" id="TaskMap">
		<id property="id" column="id" />
        <result property="parentTaskId" column="parent_task_id" />
        <result property="processDefinitionId" column="process_def_id" />
        <result property="instanceId" column="instance_id" />
        <result property="taskDefinitionKey" column="task_def_key" />
        <result property="name" column="name" />
        <result property="owner" column="owner" />
        <result property="assignee" column="assignee" />
        <result property="status" column="status" />
        <result property="dueTime" column="due_time" />
        <result property="revision" column="revision" />
        <result property="createTime" column="create_time" />
	</resultMap>
	
   	<sql id="Column_List">
        id, parent_task_id, process_def_id, instance_id, task_def_key, name, owner, assignee, status, due_time, revision,
        create_time
    </sql>
    
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into wf_task (parent_task_id, process_def_id, instance_id, task_def_key, name, owner, assignee, status,
        due_time, revision, create_time)
        values (#{parentTaskId}, #{processDefinitionId}, #{instanceId}, #{taskDefinitionKey}, #{name}, #{owner}, #{assignee}, #{status},
        #{dueTime}, #{revision}, #{createTime})
    </insert>
    
	<update id="update">
        update wf_task 
        set assignee= #{assignee}, 
        status= #{status},   
        due_time= #{dueTime}, 
        revision = revision + 1
        where id = #{id}
	</update>
	
	<delete id="delete">
		delete from wf_task where id = #{id}
	</delete>
		
	<select id="findById" parameterType="java.util.Map" resultMap="TaskMap">
		select <include refid="Column_List"/>
		from wf_task
		where id = #{id}
	</select>
	
	<select id="findByInstanceId" parameterType="java.util.Map" resultMap="TaskMap">
		select <include refid="Column_List"/>
		from wf_task
		where instance_id = #{instanceId}
	</select>
	
	<select id="findByInstanceIds" parameterType="java.util.Map" resultMap="TaskMap">
        select <include refid="Column_List"/>
        from wf_task
        where instance_id in
        <foreach collection="instanceIds" item="instanceId" open="(" close=")" separator=",">
            #{instanceId}
        </foreach>
    </select>
	
	<select id="countTotal" resultType="Long">
		select count(id) from wf_task 
		<where>
            <if test="request.assignee != null">
                assignee = #{request.assignee}
            </if>
			<if test="request.processDefinitionId != 0">
                and process_def_id = #{request.processDefinitionId}
       		</if>
            <if test="request.startTime != null">
                and create_time &gt;= #{request.startTime}
       		</if>
            <if test="request.endTime != null">
                and create_time &lt;= #{request.endTime}
       		</if>
		</where>
	</select>
	
	<select id="findPageData" parameterType="java.util.Map" resultMap="TaskMap">
		select <include refid="Column_List"/>
		from wf_task
		<where>
            <if test="request.assignee != null">
                assignee = #{request.assignee}
            </if>
			<if test="request.processDefinitionId != 0">
                and process_def_id = #{request.processDefinitionId}
       		</if>
            <if test="request.startTime != null">
                and create_time &gt;= #{request.startTime}
       		</if>
            <if test="request.endTime != null">
                and create_time &lt;= #{request.endTime}
       		</if>
		</where>
		<if test="request.sortString != null">
            order by ${request.sortString}
   		</if>
		limit #{rowOffset}, #{request.pageSize}
	</select>
	
</mapper>